#!/bin/sh

C_RESET='\033[0m'
C_RED='\033[1;31m'
C_YELLOW='\033[1;33m'
C_PURPLE='\033[0;35m'

C_LOG_INFO=$C_YELLOW
C_LOG_WARNING=$C_PURPLE
C_LOG_ERROR=$C_RED

printc () {
  COLOR_SEQ="$1"
  MSG="$2"
  END_SEQ="$3"
  [ -z "$END_SEQ" ] && END_SEQ='\n'
  printf "${COLOR_SEQ}${MSG}${C_RESET}${END_SEQ}"
}

MODE="$1"
GAME="$2"
GAMES="/usr/local/games"
LOGFILE="/home/iwas/.game-pkg.log"
MOUNTPOINT="/home/iwas/vault"
ARCHIVE_DIR="$MOUNTPOINT/games-lrz"
LRZTAR="lrztar -vv -z -p 10 -H"
LRZUNTAR="lrztar -vv -z -p 10 -H -d"
RSYNC_MV="rsync -aP --remove-source-files"
RSYNC_CP="rsync -aP"

# Print argument usage
arg_usage () { echo -ne "  $1 \t=> $2.\n"; }

# Print argument usage
usage () {
  echo "Usage:"
  arg_usage "-h/--help" "Show this help panel and exit"
  arg_usage "-a/--archive" "Compress game with ZPAQ and store it in the vault"
  arg_usage "-i/--install" "Fetch the game archival from the vault and decompress it locally"
  echo
}

# Check if given path is a mountpoint
is_mounted () { mountpoint -q "$1"; }

# Ctrl+C handler
ctrl_c () {
  printc $C_LOG_ERROR "ERROR: Exited abnormally (C-c => INT)"
  exit 1
}
trap ctrl_c INT

# Pre-script environment checks
cd /home/iwas
if [ $# -ne 2 ]; then
  usage
  exit 1
elif [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
  usage
  exit 0
elif ! is_mounted "$MOUNTPOINT"; then
  printc $C_LOG_ERROR "ERROR: Vault ($MOUNTPOINT) is not mounted"
  exit 1
fi

for game in $(ls "$GAMES"); do
  if [ "$game" = "$GAME" ]; then
    # === Archive mode === #
    if [ "$MODE" = "-a" ] || [ "$MODE" = "--archive" ]; then
      # Compute game paths
      GAME_DIR=$(dirname "$(realpath "$GAMES/$GAME")")
      PARENT_GAME_DIR=$(dirname "$GAME_DIR")
      NAME_GAME_DIR=$(basename "$GAME_DIR")
      pushd "$PARENT_GAME_DIR" &>/dev/null
      # Compress
      printc $C_LOG_INFO "INFO: Creating '${NAME_GAME_DIR}.tar.lrz' using LRZIP+ZPAQ"
      $LRZTAR "$NAME_GAME_DIR"
      # Transfer to vault
      printc $C_LOG_INFO "INFO: Transferring '${NAME_GAME_DIR}.tar.lrz' to '$ARCHIVE_DIR' using rsync"
      $RSYNC_MV "$NAME_GAME_DIR".tar.lrz "$ARCHIVE_DIR"
      # Delete game (local copy)
      rm -rvf "$GAME_DIR" \
        || printc $C_LOG_WARNING "WARNING: Failed to delete completely the dir '$GAME_DIR'"
      # Tag game as archived (write line to logfile)
      printc $C_LOG_INFO "INFO: Game path written to logfile ($LOGFILE) (tagged as archived)"
      echo "$GAME $GAME_DIR" >> "$LOGFILE"
      popd &>/dev/null
      printc $C_LOG_INFO "INFO: Game '$GAME' archived successfully. Exiting..."
    # === Extract mode === #
    elif [ "$MODE" = "-i" ] || [ "$MODE" = "--install" ]; then
      # Compute game paths (with logfile)
      GAME_DIR=$(cat "$LOGFILE" | grep "$GAME" | awk '{print $2}')
      PARENT_GAME_DIR=$(dirname "$GAME_DIR")
      NAME_GAME_DIR=$(basename "$GAME_DIR") 
      pushd "$PARENT_GAME_DIR" &>/dev/null
      # Copy from vault
      printc $C_LOG_INFO "INFO: Copying '${NAME_GAME_DIR}.tar.lrz' to local storage using rsync"
      $RSYNC_CP "$ARCHIVE_DIR"/"$NAME_GAME_DIR".tar.lrz .
      # Decompress (local copy)
      printc $C_LOG_INFO "INFO: Decompressing game using LRZIP+ZPAQ"
      $LRZUNTAR "$NAME_GAME_DIR".tar.lrz
      rm -vf "$NAME_GAME_DIR".tar.lrz
      # Tag game as installed (delete line from logfile)
      printc $C_LOG_INFO "INFO: Game path deleted from logfile ($LOGFILE) (tagged as installed)"
      sed -i "/$GAME/d" "$LOGFILE"
      popd &>/dev/null
      printc $C_LOG_INFO "INFO: Game '$GAME' installed successfully. Exiting..."
    else
      usage
      exit 1
    fi
  else
    usage
    exit 1
  fi
done
