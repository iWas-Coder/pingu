####################
# === PREAMBLE === #
####################
if [ -s $prefix/grubenv ]; then
  load_env
fi

if [ "${next_entry}" ] ; then
   set default="${next_entry}"
   set next_entry=
   save_env next_entry
   set boot_once=true
else
   set default="0"
fi

if [ "${prev_saved_entry}" ]; then
  set saved_entry="${prev_saved_entry}"
  save_env saved_entry
  set prev_saved_entry=
  save_env prev_saved_entry
  set boot_once=true
fi

function savedefault {
  if [ -z "${boot_once}" ]; then
    saved_entry="${chosen}"
    save_env saved_entry
  fi
}

function load_video {
  if [ x$feature_all_video_module = xy ]; then
    insmod all_video
  else
    insmod efi_gop
    insmod efi_uga
    insmod ieee1275_fb
    insmod vbe
    insmod vga
    insmod video_bochs
    insmod video_cirrus
  fi
}

if [ x$feature_default_font_path = xy ] ; then
  font=unicode
else
  insmod part_gpt
  insmod ext2
  search --no-floppy --label --set=root SYS
  font="/usr/share/grub/unicode.pf2"
fi

if loadfont $font ; then
  set gfxmode=800x600x32
  load_video
  insmod gfxterm
  set locale_dir=$prefix/locale
  set lang=en_US
  insmod gettext
fi

terminal_output gfxterm

if [ x$feature_timeout_style = xy ] ; then
  set timeout_style=menu
fi

set timeout=-1


##################################
# === Linux kernel functions === #
##################################
function setenv_linux_kernel {
  load_video
  set gfxpayload=keep
  insmod gzio
  insmod part_gpt
  insmod ext2
  search --no-floppy --label --set=root BOOT
}

function load_linux_kernel {
  echo -n 'Loading Linux'
  for i in 1 2 3 4 5 6 7 8 9 10 11 12 13; do
    echo -n '.'
  done
  linux $1 root=LABEL=SYS ro nvidia_drm.modeset=1
  echo -e ' ok\n'
  sleep 1.25
}

function load_linux_kernel_emergency {
  echo -n 'Loading Linux'
  for i in 1 2 3 4 5 6 7 8 9 10 11 12 13; do
    echo -n '.'
  done
  linux $1 root=LABEL=SYS rw init=/bin/bash
  echo -e ' ok\n'
  sleep 1.25
}

function ungz_linux_kernel {
  echo -n 'Decompressing Linux... '
  sleep 1.25
  echo -n 'Parsing ELF... '
  sleep 0.75
  echo -n 'Performing relocations... '
  sleep 0.75
  echo 'done.'
  echo 'Ok, booting the kernel.'
  initrd $1
}


#####################
# === GNU/Linux === #
#####################
submenu 'GNU/Linux 6.6.13-pingu+git20240121 ...' {
  menuentry '... Boot' --class gnu --class linux {
    setenv_linux_kernel
    load_linux_kernel /vmlinuz-6.6.13-pingu
    ungz_linux_kernel /initramfs-6.6.13-pingu.img
  }
  menuentry '... Emergency mode' --class gnu --class linux {
    setenv_linux_kernel
    load_linux_kernel_emergency /vmlinuz-6.6.13-pingu
    ungz_linux_kernel /initramfs-6.6.13-pingu.img
  }
}


################################
# === GNU/Linux (fallback) === #
################################
submenu 'GNU/Linux 6.1.57-pingu+git20231015 (fallback) ...' {
  menuentry '... Boot (fallback)' --class gnu --class linux {
    setenv_linux_kernel
    load_linux_kernel /vmlinuz-6.1.57-pingu
    ungz_linux_kernel /initramfs-6.1.57-pingu.img
  }
  menuentry '... Emergency mode (fallback)' --class gnu --class linux {
    setenv_linux_kernel
    load_linux_kernel_emergency /vmlinuz-6.1.57-pingu
    ungz_linux_kernel /initramfs-6.1.57-pingu.img
  }
}


############################
# === Advanced options === #
############################
submenu 'Advanced options ...' {
  menuentry '... Reboot to UEFI Firmware Settings' --class power {
    fwsetup
  }
  menuentry '... Reboot' --class power {
    reboot
  }
  menuentry '... Halt' --class power {
    halt
  }
}

